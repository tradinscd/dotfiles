#
# i3 dotfile
# ~/.config/i3/config
# Name: nil
#
# Startup Applications {{{
# -----------------------------------------------------------------------------

# [L+E] Use this if you have both laptop and external display.
#exec conky -c ~/.config/nil/conky/.conkyrc | dzen2 -w 100 -x 910 -y 3 -ta c -fg '#707070' -bg '#f9f9f9' -fn 'lemon'
#exec conky -c ~/.config/nil/conky/.conkyright2rc | dzen2 -w 910 -x 1010 -y 3 -ta r -fg '#707070' -bg '#f9f9f9' -fn 'lemon'
exec conky -c ~/.config/nil/conky/.conkyrc | dzen2 -w 100 -x 633 -y 3 -ta c -fg '#707070' -bg '#f9f9f9' -fn 'lemon' -xs 1
exec conky -c ~/.config/nil/conky/.conkyrightrc | dzen2 -w 632 -x 734 -y 3 -ta r -fg '#707070' -bg '#f9f9f9' -fn 'lemon' -xs 1
exec firefox &
exec gvim &
exec libreoffice ~/Dropbox/nil/Aesthetics/Macros.ods &
# [L+E] Use this if you have both laptop and external display.
#exec urxvt -name nil -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x24 &
#exec urxvt -name irssi -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x31 -e irssi &
#exec urxvt -name ncmpcpp -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x9 -e ncmpcpp &
#exec urxvt -name ranger -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x19 -e ranger &
# [L] Use this if you only have laptop display.
exec urxvt -name nil -g 85x24 &
exec urxvt -name irssi -g 102x35 -e irssi &
exec urxvt -name ncmpcpp -g 102x10 -e ncmpcpp &
exec urxvt -name ranger -g 102x21 -e ranger &
exec urxvt -name tcli -g 129x18 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
# These terminal commands should be placed in .xinitrc.
exec dropboxd &
exec rssdler -d &
# I tried applying both of these commands in .xinitrc with no luck, yet here it works. What the do?
exec mpdas &
exec transmission-daemon &

# }}}
# Windows {{{
# -----------------------------------------------------------------------------

# Set modifier key.
set $mod Mod1
set $mod2 Mod4

# Mouse left-click drag to move, right-click drag to resize.
floating_modifier $mod

# Kill focused window.
bindsym $mod+d kill

# Change container layout.
# One toggles splitv/splith, and the other toggles stacking/tabbed.
#bindsym $mod+e layout toggle split
bindsym $mod+s exec bash ~/.config/nil/scripts/i3-container-toggle

# Split in horizontal/vertical orientation.
bindsym $mod+x split h
bindsym $mod+v split v

# Toggle tiling/floating for focused window.
bindsym $mod+Shift+space floating toggle

# Change focus between tiling/floating windows.
bindsym $mod+space focus mode_toggle

# Enter fullscreen mode for focused container.
bindsym $mod+Shift+f fullscreen

# Resize window mode.
mode "resize" {
    # h/j will +/- the window's width, k/l will +/- the window's height.
    bindsym h resize shrink width 5 px or 5 ppt
    bindsym j resize grow height 5 px or 5 ppt
    bindsym k resize shrink height 5 px or 5 ppt
    bindsym l resize grow width 5 px or 5 ppt

    # Allow movement of window as well during the mode.
    bindsym $mod+Shift+h move left
    bindsym $mod+Shift+j move down
    bindsym $mod+Shift+k move up
    bindsym $mod+Shift+l move right

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Window border style.
new_float pixel 2
new_window pixel 2

# Font & Colors for window titles.
# Class                 border  Backgr. Text    Indicator
client.focused          #707070 #707070 #e0e0e0 #2f4f4f
client.focused_inactive #e0e0e0 #e0e0e0 #707070 #484e50
client.unfocused        #e0e0e0 #e0e0e0 #707070 #292d2e
client.urgent           #2f343a #900000 #ffffff #900000
font pango:lemon

# }}}
# Focusing & Config Loading {{{
# -----------------------------------------------------------------------------

# Change focus commands.
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# Move focused window.
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# Reload the configuration file, Restart i3 inplace (preserves layout/session).
bindsym $mod+Shift+c reload
# Be wary. This one ruins dzen2 and for_window positions.
bindsym $mod+Shift+r exec "pkill conky"; restart
# exit i3 (logs you out of your X session)
bindsym Mod1+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# }}}
# Workspaces {{{
# -----------------------------------------------------------------------------

# Other stylistic choices: dice, chinese/japanese/etc, greek alphabet, other UTF-8.
# Switch to workspace.
bindsym $mod+1 workspace i
bindsym $mod+2 workspace ii
bindsym $mod+3 workspace iii
bindsym $mod+4 workspace iv
bindsym $mod+5 workspace v
bindsym $mod+6 workspace vi
bindsym $mod+7 workspace vii
bindsym $mod+8 workspace viii
bindsym $mod+9 workspace ix
bindsym $mod+0 workspace x
bindsym $mod2+1 workspace -
bindsym $mod2+2 workspace =
bindsym $mod2+3 workspace ⌯
bindsym $mod2+4 workspace ﬩

# Move focused container to workspace.
bindsym $mod+Shift+1 move container to workspace i
bindsym $mod+Shift+2 move container to workspace ii
bindsym $mod+Shift+3 move container to workspace iii
bindsym $mod+Shift+4 move container to workspace iv
bindsym $mod+Shift+5 move container to workspace v
bindsym $mod+Shift+6 move container to workspace vi
bindsym $mod+Shift+7 move container to workspace vii
bindsym $mod+Shift+8 move container to workspace viii
bindsym $mod+Shift+9 move container to workspace ix
bindsym $mod+Shift+0 move container to workspace x
bindsym $mod2+Shift+1 move container to workspace -
bindsym $mod2+Shift+2 move container to workspace =
bindsym $mod2+Shift+3 move container to workspace ⌯
bindsym $mod2+Shift+4 move container to workspace ﬩

# Force a consistent workspace # layout, so I can move it to that workspace without wondering whether it went to the right monitor.
# I prefer this (dynamic tag creation plugin of Awesome) over default i3.
workspace i output LVDS1
workspace ii output LVDS1
workspace iii output LVDS1
workspace iv output LVDS1
workspace v output LVDS1
workspace vi output LVDS1
workspace vii output LVDS1
workspace vii output LVDS1
workspace ix output LVDS1
workspace x output LVDS1
workspace - output HDMI1
workspace = output HDMI1
workspace ⌯ output HDMI1
workspace ﬩ output HDMI1

# i3bar Panel
bar {
    colors {
    background #f9f9f9
    #colorclass         border  backgr  text
    focused_workspace   #707070 #707070 #f9f9f9
    active_workspace    #707070 #707070 #f9f9f9
    inactive_workspace  #f9f9f9 #f9f9f9 #707070
    urgent_workspace    #2f343a #900000 #f9f9f9
    }
    position top
    font pango: nu
    tray_output none
    colors { statusline #000000 }
}
# }}}
# Application Settings {{{
# -----------------------------------------------------------------------------

# Force floating on all pop-up windows, e.g., browser pop-ups.
for_window [window_role="pop-up"] floating enable
# Force specifically some Firefox windows.
for_window [title="^Library$"] floating enable
for_window [title="^Firefox Preferences$"] floating enable
for_window [title="^Options for Menu Editor$"] floating enable
for_window [title="^Tab Mix Plus Options$"] floating enable

# Assign application to workspace on startup.
assign [class="^URxvt$" instance="^nil$"] -
assign [class="^URxvt$" instance="^irssi$"] -
assign [class="^URxvt$" instance="^ncmpcpp$"] -
assign [class="^URxvt$" instance="^ranger$"] -
assign [class="^URxvt$" instance="^tcli$"] i
assign [class="^Firefox$"] ii
assign [instance="VCLSalFrame"] iii
assign [class="^Gimp$"] iv
# [L+E] Use this if you have both laptop and external display.
#assign [class="^feh$"] -
#assign [class="^mpv$"] -
#assign [class="^Zathura$"] -
# [L] Use this if you only have laptop display.
assign [class="^feh$"] =
assign [class="^mpv$"] =
assign [class="^Zathura$"] =

# Float, focus, and position application on startup.
# [L+E] Use this if you have both laptop and external display.
#for_window [class="^URxvt$" instance="^nil$"] floating enable,focus,move absolute position 1340px 550px
#for_window [class="^URxvt$" instance="^irssi$"] floating enable,focus,move absolute position 1340px 175px
#for_window [class="^URxvt$" instance="^ncmpcpp$"] floating enable,focus,move absolute position 1340px 40px
#for_window [class="^URxvt$" instance="^ranger$"] floating enable,focus,move absolute position 1340px 845px
#for_window [class="^URxvt$" instance="^tcli$"] floating enable,focus,move absolute position 1950px 560px
#for_window [class="^Gvim$"] floating enable,focus,move absolute position 1950px 40px
#for_window [class="^feh$"] floating enable,focus,move absolute position center,move left 290px
#for_window [class="^mpv$"] floating enable,focus,move absolute position center,move left 300px
#for_window [class="^Zathura$"] floating enable,focus,move absolute position center,move left 300px
# [L] Use this if you only have laptop display.
for_window [class="^URxvt$" instance="^nil$"] floating enable,focus, move absolute position 70px 260px
for_window [class="^URxvt$" instance="^irssi$"] floating enable,focus, move absolute position 780px 165px
for_window [class="^URxvt$" instance="^ncmpcpp$"] floating enable,focus, move absolute position 780px 35px
for_window [class="^URxvt$" instance="^ranger$"] floating enable,focus, move absolute position 780px 540px
for_window [class="^URxvt$" instance="^tcli$"] floating enable,focus,move absolute position 30px 560px
for_window [class="^Gvim$"] floating enable,focus,move absolute position 30px 40px
for_window [class="^feh$"] floating enable,focus, move absolute position center, move down 10px
for_window [class="^mpv$"] floating enable,focus,move absolute position center, move down 10px
for_window [class="^Zathura$"] floating enable,focus, move absolute position center, move down 10px

# Shortcut Application focusing.
bindsym $mod+t [class="^URxvt$" instance="^nil$"] focus
bindsym $mod+i [class="^URxvt$" instance="^irssi$"] focus
bindsym $mod+n [class="^URxvt$" instance="^ncmpcpp$"] focus
bindsym $mod+f [class="^URxvt$" instance="^ranger$"] focus
bindsym $mod+a [class="^URxvt$" instance="^tcli$"] focus
bindsym $mod+w [class="^Gvim$"] focus
bindsym $mod+o [instance="VCLSalFrame"] focus
bindsym $mod+g [class="^Gimp$"] focus
bindsym $mod+e [class="^feh$"] focus
bindsym $mod+m [class="^mpv$"] focus
bindsym $mod+z [class="^Zathura$"] focus
bindsym $mod+q [class="^Firefox$"] focus
bindsym $mod+Shift+i exec echo >> ~/.irssi/logs/fnotify

# Shortcut Applications.
bindsym $mod2+Return exec urxvt
# [L+E] Use this if you have both laptop and external display.
#bindsym $mod2+t exec urxvt -name nil -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x24 &
#bindsym $mod2+i exec urxvt -name irssi -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x31 -e irssi &
#bindsym $mod2+n exec urxvt -name ncmpcpp -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x9 -e ncmpcpp &
#bindsym $mod2+f exec urxvt -name ranger -font 'xft:uushi' -boldFont 'xft:uushi' -g 85x19 -e ranger &
# [L] Use this if you only have laptop display.
bindsym $mod2+t exec urxvt -name nil -g 85x24 &
bindsym $mod2+i exec urxvt -name irssi -g 102x35 -e irssi &
bindsym $mod2+n exec urxvt -name ncmpcpp -g 102x10 -e ncmpcpp &
bindsym $mod2+f exec urxvt -name ranger -g 102x21 -e ranger &
bindsym $mod2+a exec urxvt -name tcli -g 129x18 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
bindsym $mod2+w exec gvim
bindsym $mod2+q exec firefox

# A desultory, haphazard method for a calendar "dropdown" (which actually works quite well).
# Problems: No dropdown animation. No click/hoverable feature. No click/keybinds to move to different months. Clickable dzen flag and compton can solve both of these.
for_window [class="^URxvt$" instance="^calendar$"] floating enable move up 325px
bindsym $mod+c exec bash ~/.config/nil/scripts/calendar-toggle

# Media Keys.
bindsym F6 exec bash ~/.config/nil/scripts/play-pause
# PCM affects HDMI, Master affects Analog.
bindsym F9 exec amixer set Master 2%- unmute | amixer set PCM 2%- unmute
bindsym F10 exec amixer set Master 2%+ unmute | amixer set PCM 2%+ unmute
bindsym F11 exec amixer set Master toggle | amixer set IEC958 toggle

# }}}
# Documentation {{{
# -----------------------------------------------------------------------------
# On my work method {{{
# For frequently used applications, I float them, often because they don't need to take the entire screen nor does it look
# very pretty (particularly on my 27'' display). In fact, that becomes counter-intuitive to the tiling WM philosophy, since
# while you're using the full screen for an application, you could more effectively use that unneeded space for another
# application (much like how I orient my floating windows). Gaps are pretty and arguably helps efficiency (it keeps my eyes
# focused on key apps for example, and concentrates text from having massive margins). Then to focus an application, I have a keybind to focus each one of my main apps (as well a similar keybind which spawns them), with i3's properties set in place to give them the floating property and their location. This works both for 'casual use' and 'real work', as floating this way is efficient in both manners. I honestly use a mouse maybe once every 5 minutes at most, and the only times I require it are the few times pentadactyl fails on me in Firefox (e.g., popup links, javascript) and in non-main GUI apps like libreoffice and gimp.
# }}}
# On [L+E] Laptop + External Display versus [L] Laptop-only Display {{{
# I use a setup of a 1366x768 display connected to an external one with 1920x1080. However, I don't always have the external
# display connected to the laptop. Hence, I noted necessary-to-change regions with [L=E] and [L], which I (un)comment
# correspondingly depending on whichever displays I have available. This is for personal usage. I have to configure the
# following apps (all of which are also (un)commented accordingly):
# ~/.config/i3/config
# ~/.config/nil/conky/.conkyrightrc
# ~/.config/ranger/rifle.conf
# ~/.config/zathura/zathurarc
# ~/.irssi/config
# ~/.mpv/config
# nitrogen wallpaper
# }}}
# On panels {{{
# You can pipe conky into i3bar, but the caveat is that you can't change text alignment in i3bar or conky alone. This means
# that in order to get all three text alignments (i.e., left, center, right), you have to use i3bar to displays the
# workspaces on one such alignment, and two other panels for the other two alignments. However, the problem is that i3bar
# takes up the entire dock, so when piping conky into dzen2 in your other two panels, you have to set specific resolutions
# in order to overlap your i3bar. This means you can't do something as simple as the -dock flag in dzen2.
#
# This inevitably causes problems on certain apps and effects. When i3 restarts, i3bar is reissued, which causes it to
# overlap all your dzen2's, causing you to restart them. Also, Compton can have app shadows which clearly distinguish the
# panels when they're over them. There's even janky bugs like if you have mpv on fullscreen in one monitor, then moving
# between workspaces the second monitor will cause you to see the dzen2 bar on the other monitor to start flickering.
#
# One should note that there is a old script called i3-wsbar which allows one to basically pipe the i3 info into dzen2, but
# basically the only thing this lets you do is not set the "i3bar" as -dock, and make it smaller/configurable based on dzen2
# flags. Overall, this helps none of the problems above in my case, and will only solve the issue of i3bar overlapping the
# dzen2's when I restart i3. But I don't want to install roughly 5 python packages just to get the script running for that.
# }}}
# On floating window auto-movement {{{
# 'move absolute position' is the best method since it configures the placement of your windows based on its top left corner pixel absolutely. For example, 'move position' will re-do its command if you restart i3! However, there's a caveat. With windows that have variable sizes (for example, feh, mpv, zathura), having position configured by its top left corner is hardly accurate. It should be done by moving its center, which solves this issue, but it isn't. Fortunately, move position is. To solve this, and also solve the problem of 'move position' moving your windows again, you can do a slight hack: 'move absolute position center,move position ...'. This moves your window back into the center before it moves it again! Hooray. In other words, this means 'move absolute position center,move position ...' is legitimately the best method, solving both movement on restart command and variable size windows. If the window isn't variable sized, I guess you can use 'move absolute position ...' too.
# }}}
# On scratchpads {{{
# I decided to go full ricer and just leave the windows up on different workspaces, usually on my second monitor. Hence I
# only need to focus on them, as I no longer use a scratchpad. Scratchpads are good if you're limited on space (I am not),
# and don't want them preconfigured on another workspace. I also never liked the idea of having truly hidden applications
# until a keybind. Just feels weird when you want to poweroff, and you want to ensure that all main applications are closed
# beforehand.

# These are applications always left running on the PC, and for which one only need to take a quick peek once in a while to
# do something on them. They also generally feel much nicer to use in compact floating windows, rather than the pervasive
# array of space if you just place them into their own workspace (which somehow feels even less productive).
# To use multiple scratchpads, there's a trick required in i3, since once you show two open scratchpad applications
# simultaneously, all hell breaks loose. To get around this without requiring more keybindings, you need to make your
# commands leave all other applications hidden in the scratchpad /before/ you show your next scratchpad application. There's
# yet another caveat: to use the for_window command to automove applications into the scratchpad, you have to be super
# -specific so that not even its child popup windows will be subsumed under the scratchpad (e.g. settings windows).

#for_window [class="^URxvt$" instance="^irssi$"] move scratchpad
#for_window [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad
#for_window [class="^URxvt$" instance="^tcli$"] move scratchpad
#for_window [class="^URxvt$" instance="^nil$"] move scratchpad

#bindsym $mod+i [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^irssi$"] scratchpad show
#bindsym $mod+m [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] scratchpad show
#bindsym $mod+a [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] scratchpad show
#bindsym $mod+t [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [instance="^nil$"] scratchpad show
#}}}
# vim:filetype=i3
# }}}
