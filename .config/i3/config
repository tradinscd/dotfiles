#
# i3 dotfile
# ~/.config/i3/config
# Name: nil
#
# To-Do List {{{
# -----------------------------------------------------------------------------

# My Work Ethic:
# For frequently used applications, I float them, often because they don't need to take the entire screen nor does it look pretty (particularly on my 27'' display). In fact, that becomes counter-intuitive to the tiling WM philosophy, since while you're using the full screen for an application, you could more effectively use that unneeded space for another application (much like how I orient my floating windows). Gaps are pretty and arguably helps efficiency (it keeps my eyes focused on key apps for example). This works both for 'casual use' and 'real work', as floating this way is efficient for both manners.

###############################################################################
# To-Do
###############################################################################

# Medium Priority:
#   * ncmcpp reissues for_window occasionally.
#   * make sure the conky/dzens work right when hotplugged
# Low Priority:
#   * Set all firefox popups to float more generally, rather than needing to xprop each individually.
#       * read up on no-startup-id.
#   * dzen2 in center has weird flickering when moving workspaces in laptop rapidly, while HDMI is in fullscreen on mpv
#   * When restarting, the nondocked dzen2's get overlapped because i3bar restarts, and the for_windows re-do themselves.
#   * Switch audios on hotplug without requiring restart applications, and distinct volumes on each, whilst still allowing for just three buttons (a pulseaudio solution).

###############################################################################
# Wishlist
###############################################################################
# ** are notated for high priority.

# Panel/Workspaces:
#   ** Non-# order, e.g., alphabetical or customizable.
#   ** Keybindable panel applets, e.g., a now-playing mpd widget with not just hover/click support, but keybind support.
#   * Can't add a black outline to the panel.
#   * Image icon/non-UTF name support.
#   * Different styles for focused workspace, e.g., a triangle at the top left, etc.
#   * Don't overlap the dzen2's when restarting i3bar.
# Windows:
#   ** When focusing an application and there are multiple hits for that string, cycle among them; don't just stick with the first result.
#   * Ability to not use borders on non-floating windows, but keep them for manually made floating windows. (And
#       also a keybind to be able to toggle that border.)
#   * More instantaneous mouse-over-window focus, rather than require to move further into the window to activate focus.
# - Floating:
#   * Move between floating windows with hjkl, not just a (counter)clockwise cycle through hl.
#       * As a subset, this means I can't move to the next monitor with hl.
#   * Absolute positioning based off workspace, not pixels and monitor alignment.
#       for_window [class=asdf] move absolute position 4000 px 300 px works, but is not nice for dynamic monitor management, e.g., if I switch to just the laptop instead of a dual screen setup.
#   * Ability to dynamically set the different floating layouts, move (by cycling) the floating windows around, etc.
#   * Independent scratchpads, e.g., ability to have multiple overlayed on each other and still
#       can toggle hide them all away (can only do one at a time currently).
#   * Ability to hide/close floating window on loss of focus (for better use of some scratchpad
#       windows, like scratchpad terminals).
# Misc:
#   * Execute a shell command when triggered with focusing a window, e.g., remove irssi notification ping once you focus irssi.
#   * Right-click desktop with options.
#   * When changing workspaces and back, the w3m image preview in ranger is gone.

# }}}
# Startup Applications {{{
# -----------------------------------------------------------------------------

# I can't get separate text alignments to work out in conky, so I'm splitting dzen into 3: L, M, and R; with 2 different conkyrcs for M and R per display. Workspaces on L are shown on both displays via i3bar. Note the dzen2's are clearly resolution-specific, and will need configuring for HDMI/monitor hotplugs, etc.
exec conky -c ~/.config/nil/conky/.conkyrc | dzen2 -w 100 -x 910 -y 3 -ta c -fg '#707070' -bg '#f9f9f9' -fn 'lemon'
exec conky -c ~/.config/nil/conky/.conkyright2rc | dzen2 -w 910 -x 1010 -y 3 -ta r -fg '#707070' -bg '#f9f9f9' -fn 'lemon'
exec conky -c ~/.config/nil/conky/.conkyrc | dzen2 -w 100 -x 633 -y 3 -ta c -fg '#707070' -bg '#f9f9f9' -fn 'lemon' -xs 1
exec conky -c ~/.config/nil/conky/.conkyrightrc | dzen2 -w 632 -x 734 -y 3 -ta r -fg '#707070' -bg '#f9f9f9' -fn 'lemon' -xs 1
exec firefox &
exec gvim &
exec libreoffice ~/Dropbox/nil/Aesthetics/Macros.ods &
# For uushi.
#exec urxvt -name nil -g 85x24 &
#exec urxvt -name irssi -g 85x31 -e irssi &
#exec urxvt -name ncmpcpp -g 85x9 -e ncmpcpp &
#exec urxvt -name ranger -g 85x19 -e ranger &
#exec urxvt -name tcli -g 108x16 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
exec urxvt -name nil -g 102x26 &
exec urxvt -name irssi -g 102x35 -e irssi &
exec urxvt -name ncmpcpp -g 102x10 -e ncmpcpp &
exec urxvt -name ranger -g 102x21 -e ranger &
exec urxvt -name tcli -g 130x18 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
# These terminal commands should be placed in .xinitrc.
exec dropboxd &
exec rssdler -d &
# I tried applying both of these commands in .xinitrc with no luck, yet here it works. What the do?
exec mpdas &
exec transmission-daemon &

# }}}
# Windows {{{
# -----------------------------------------------------------------------------

# Set modifier key.
set $mod Mod1
set $mod2 Mod4

# Mouse left-click drag to move, right-click drag to resize.
floating_modifier $mod

# Kill focused window.
bindsym $mod+d kill

# Change container layout.
# One toggles splitv/splith, and the other toggles stacking/tabbed.
#bindsym $mod+e layout toggle split
bindsym $mod+s exec bash ~/.config/nil/scripts/i3-container-toggle

# Split in horizontal/vertical orientation.
bindsym $mod+x split h
bindsym $mod+v split v

# Toggle tiling/floating for focused window.
bindsym $mod+Shift+space floating toggle

# Change focus between tiling/floating windows.
bindsym $mod+space focus mode_toggle

# Enter fullscreen mode for focused container.
bindsym $mod+Shift+f fullscreen

# Resize window mode.
mode "resize" {
    # h/j will +/- the window's width, k/l will +/- the window's height.
    bindsym h resize shrink width 10 px or 10 ppt
    bindsym j resize grow height 10 px or 10 ppt
    bindsym k resize shrink height 10 px or 10 ppt
    bindsym l resize grow width 10 px or 10 ppt

    # Allow movement of window as well during the mode.
    bindsym $mod+Shift+h move left
    bindsym $mod+Shift+j move down
    bindsym $mod+Shift+k move up
    bindsym $mod+Shift+l move right

    # back to normal: Enter or Escape
    bindsym Return mode "default"
    bindsym Escape mode "default"
}

bindsym $mod+r mode "resize"

# Window border style.
new_float pixel 2
new_window pixel 2

# Font & Colors for window titles.
# Class                 border  Backgr. Text    Indicator
client.focused          #e0e0e0 #707070 #e0e0e0 #2f4f4f
client.focused_inactive #e0e0e0 #e0e0e0 #e0e0e0 #484e50
client.unfocused        #e0e0e0 #e0e0e0 #e0e0e0 #292d2e
client.urgent           #2f343a #900000 #ffffff #900000
font pango:lemon

# }}}
# Focusing & Config Loading {{{
# -----------------------------------------------------------------------------

# Change focus commands.
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# Move focused window.
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# Reload the configuration file, Restart i3 inplace (preserves layout/session).
bindsym $mod+Shift+c reload
# Be wary. This one ruins dzen2 and for_window positions.
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym Mod1+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# }}}
# Workspaces {{{
# -----------------------------------------------------------------------------

# Other stylistic choices: dice, chinese/japanese/etc, greek alphabet, other UTF-8.
# Switch to workspace.
bindsym $mod+1 workspace i
bindsym $mod+2 workspace ii
bindsym $mod+3 workspace iii
bindsym $mod+4 workspace iv
bindsym $mod+5 workspace v
bindsym $mod+6 workspace vi
bindsym $mod+7 workspace vii
bindsym $mod+8 workspace viii
bindsym $mod+9 workspace ix
bindsym $mod+0 workspace x
bindsym $mod2+1 workspace -
bindsym $mod2+2 workspace =
bindsym $mod2+3 workspace ⌯
bindsym $mod2+4 workspace ﬩
#bindsym $mod2+5 workspace 15
#bindsym $mod2+6 workspace 16
#bindsym $mod2+7 workspace 17
#bindsym $mod2+8 workspace 18
#bindsym $mod2+9 workspace 19
#bindsym $mod2+0 workspace 20

# Move focused container to workspace.
bindsym $mod+Shift+1 move container to workspace i
bindsym $mod+Shift+2 move container to workspace ii
bindsym $mod+Shift+3 move container to workspace iii
bindsym $mod+Shift+4 move container to workspace iv
bindsym $mod+Shift+5 move container to workspace v
bindsym $mod+Shift+6 move container to workspace vi
bindsym $mod+Shift+7 move container to workspace vii
bindsym $mod+Shift+8 move container to workspace viii
bindsym $mod+Shift+9 move container to workspace ix
bindsym $mod+Shift+0 move container to workspace x
bindsym $mod2+Shift+1 move container to workspace -
bindsym $mod2+Shift+2 move container to workspace =
bindsym $mod2+Shift+3 move container to workspace ⌯
bindsym $mod2+Shift+4 move container to workspace ﬩
#bindsym $mod2+Shift+5 move container to workspace 15
#bindsym $mod2+Shift+6 move container to workspace 16
#bindsym $mod2+Shift+7 move container to workspace 17
#bindsym $mod2+Shift+8 move container to workspace 18
#bindsym $mod2+Shift+9 move container to workspace 19
#bindsym $mod2+Shift+0 move container to workspace 20

# Force a consistent workspace # layout, so I can move it to that workspace without wondering whether it went to the right monitor.
# I prefer this (dynamic tag creation plugin of Awesome) over default i3.
workspace i output LVDS1
workspace ii output LVDS1
workspace iii output LVDS1
workspace iv output LVDS1
workspace v output LVDS1
workspace vi output LVDS1
workspace vii output LVDS1
workspace vii output LVDS1
workspace ix output LVDS1
workspace x output LVDS1
workspace - output HDMI1
workspace = output HDMI1
workspace ⌯ output HDMI1
workspace ﬩ output HDMI1
#workspace 15 output HDMI1
#workspace 16 output HDMI1
#workspace 17 output HDMI1
#workspace 18 output HDMI1
#workspace 19 output HDMI1
#workspace 10 output HDMI1

# i3bar Panel
bar {
    colors {
    background #f9f9f9
    #colorclass         border  backgr  text
    focused_workspace   #707070 #707070 #f9f9f9
    active_workspace    #707070 #707070 #f9f9f9
    inactive_workspace  #f9f9f9 #f9f9f9 #707070
    urgent_workspace    #2f343a #900000 #f9f9f9
    }
    position top
    font pango: nu
    tray_output none
    colors { statusline #000000 }
}
# }}}
# Application Settings {{{
# -----------------------------------------------------------------------------

# Force floating on all pop-up windows, e.g., browser pop-ups.
for_window [window_role="pop-up"] floating enable
# Force specifically some Firefox windows.
for_window [title="^Library$"] floating enable
for_window [title="^Firefox Preferences$"] floating enable
for_window [title="^Options for Menu Editor$"] floating enable
for_window [title="^Tab Mix Plus Options$"] floating enable

# Assign application to workspace on startup.
assign [class="^URxvt$" instance="^nil$"] -
assign [class="^URxvt$" instance="^irssi$"] -
assign [class="^URxvt$" instance="^ncmpcpp$"] -
assign [class="^URxvt$" instance="^ranger$"] -
assign [class="^URxvt$" instance="^tcli$"] i
assign [class="^feh$"] -
assign [class="^Firefox$"] ii
assign [class="^Gimp$"] iv
assign [class="^Gvim$"] i
assign [instance="VCLSalFrame"] iii
assign [class="^mpv$"] -
assign [class="^Zathura$"] -

# Float, focus, and position application on startup.
for_window [class="^URxvt$" instance="^nil$"] floating enable,focus,move down 140px,move right 640px
for_window [class="^URxvt$" instance="^irssi$"] floating enable,focus,move up 200px,move right 640px
for_window [class="^URxvt$" instance="^ncmpcpp$"] floating enable,focus,move up 455px,move right 640px
for_window [class="^URxvt$" instance="^ranger$"] floating enable,focus,move down 405px,move right 640px
# For uushi.
#for_window [class="^URxvt$" instance="^tcli$"] floating enable,focus,move down 265px,move left 325px
for_window [class="^URxvt$" instance="^tcli$"] floating enable,focus,move down 265px,move left 324px
for_window [class="^feh$"] floating enable,focus,move left 290px
for_window [class="^Gvim$"] floating enable,focus,move up 102px,move left 325px
for_window [class="^mpv$"] floating enable,focus,move left 300px
for_window [class="^Zathura$"] floating enable,focus,move left 300px

# Shortcut Application focusing.
bindsym $mod+t [class="^URxvt$" instance="^nil$"] focus
bindsym $mod+i [class="^URxvt$" instance="^irssi$"] focus
bindsym $mod+n [class="^URxvt$" instance="^ncmpcpp$"] focus
bindsym $mod+f [class="^URxvt$" instance="^ranger$"] focus
bindsym $mod+a [class="^URxvt$" instance="^tcli$"] focus
bindsym $mod+e [class="^feh$"] focus
bindsym $mod+g [class="^Gimp$"] focus
bindsym $mod+o [instance="VCLSalFrame"] focus
bindsym $mod+m [class="^mpv$"] focus
bindsym $mod+z [class="^Zathura$"] focus
bindsym $mod+w [class="^Gvim$"] focus
bindsym $mod+q [class="^Firefox$"] focus
bindsym $mod+Shift+i exec echo >> ~/.irssi/logs/fnotify

# Shortcut Applications.
bindsym $mod2+Return exec urxvt
# For uushi.
#bindsym $mod2+t exec urxvt -name nil -font 'xft:uushi' -g 85x31 &
#bindsym $mod2+i exec urxvt -name irssi -font 'xft:uushi' -g 85x31 -e irssi &
#bindsym $mod2+n exec urxvt -name ncmpcpp -font 'xft:uushi' -g 85x9 -e ncmpcpp &
#bindsym $mod2+f exec urxvt -name ranger -font 'xft:uushi' -g 85x19 -e ranger &
#bindsym $mod2+a exec urxvt -name tcli -font 'xft:uushi' -g 107x16 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
bindsym $mod2+t exec urxvt -name nil -g 102x26 &
bindsym $mod2+i exec urxvt -name irssi -g 102x35 -e irssi &
bindsym $mod2+n exec urxvt -name ncmpcpp -g 102x10 -e ncmpcpp &
bindsym $mod2+f exec urxvt -name ranger -g 102x21 -e ranger &
bindsym $mod2+a exec urxvt -name tcli -g 130x18 -e ~/.config/nil/scripts/nil-transmission-remote-cli &
bindsym $mod2+w exec gvim
bindsym $mod2+q exec firefox

# A desultory, haphazard method for a calendar "dropdown" (which actually works quite well).
# Problems: No dropdown animation. No click/hoverable feature. No click/keybinds to move to different months.
for_window [class="^URxvt$" instance="^calendar$"] floating enable move up 325px
bindsym $mod+c exec bash ~/.config/nil/scripts/calendar-toggle

# Media Keys.
bindsym F6 exec bash ~/.config/nil/scripts/play-pause
# PCM affects HDMI, Master affects Analog.
bindsym F9 exec amixer set Master 2%- unmute | amixer set PCM 2%- unmute
bindsym F10 exec amixer set Master 2%+ unmute | amixer set PCM 2%+ unmute
bindsym F11 exec amixer set Master toggle | amixer set IEC958 toggle

# }}}
# Archive - On Scratchpads {{{
# -----------------------------------------------------------------------------
# Documentation in case one ever wants to use a scratchpad.
# I decided to go full ricer and just leave the windows up on different workspaces, usually on my second monitor. Hence I only need to focus on them, as I no longer use a scratchpad. Scratchpads are good if you're limited on space (I am not), and don't want them preconfigured on another workspace. I also never liked the idea of having truly hidden applications until a keybind. Just feels weird when you want to poweroff, and you want to ensure that all main applications are closed beforehand.

# These are applications always left running on the PC, and for which one only need to take a quick peek once in a while to do something on them. They also generally feel much nicer to use in compact floating windows, rather than the pervasive array of space if you just place them into their own workspace (which somehow feels even less productive).
# To use multiple scratchpads, there's a trick required in i3, since once you show two open scratchpad applications simultaneously, all hell breaks loose. To get around this without requiring more keybindings, you need to make your commands leave all other applications hidden in the scratchpad /before/ you show your next scratchpad application. There's yet another caveat: to use the for_window command to automove applications into the scratchpad, you have to be super-specific so that not even its child popup windows will be subsumed under the scratchpad (e.g. settings windows).

#for_window [class="^URxvt$" instance="^irssi$"] move scratchpad
#for_window [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad
#for_window [class="^URxvt$" instance="^tcli$"] move scratchpad
#for_window [class="^URxvt$" instance="^nil$"] move scratchpad

#bindsym $mod+i [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^irssi$"] scratchpad show
#bindsym $mod+m [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] scratchpad show
#bindsym $mod+a [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^nil$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] scratchpad show
#bindsym $mod+t [class="^URxvt$" instance="^irssi$"] move scratchpad, [class="^URxvt$" instance="^ncmpcpp$"] move scratchpad, [class="^URxvt$" instance="^tcli$"] move scratchpad, [instance="^nil$"] scratchpad show


# vim:filetype=i3
# }}}
