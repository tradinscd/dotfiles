#! /bin/bash

# This is my solution to efficient playlist navigation in mpv. It makes use of ranger to add files to the playlist, and vim to rearrange items on the list.
#
# WHAT IT DOES:
#   * Pause ncmpcpp, e.g., if it's playing while I open mpv.
#   * If mpv isn't running, take all arguments and place them into a new playlist; then mpv plays from that list.
#   * If mpv is running, take all arguments and append them into the current playlist.
#   * Incidentally, it also gives the desired functionality of only one running instance of mpv.
#
# WHAT IT MEANS:
# This is the default mpv command for my rifle.conf. This allows me to open any number of selected videos from ranger and
# directly append them to this playlist. This solves the dilemma of trying to add files to a playlist within a non-GUI,
# non-slaved video player. It's even faster than GUI's because you're adding everything via ranger keybinds (!).
#
# I can then rearrange the playlist (add, remove, reorder, "save as") by directly editing the playlist file; leaving vim
# for me automatically triggers mpv-reload, which reloads the playlist. That's it!
#
# WHAT ISN'T PERFECT:
#   1. mpv won't auto-reload the playlist so you have to do it manually. I've automated it on exiting gvim, but you otherwise
# have to reload it manually if straight from mpv.
#   2. To reload without losing your mpv position, you're forced to use reload with append. But to keep the playlist order
# correct, you have to delete all previous items before and including your current playing file in the playlist. Hence,
# backwards navigation isn't very comprehensive since you keep removing all your shit (and must do this manually, mind you).

ncmpcpp pause
if [ $(pgrep mpv) -ne 0 ]
then
    rm ~/.mpv/playlist
    for i in "$@"; do
        echo "$i" >> ~/.mpv/playlist
    done
    mpv --playlist ~/.mpv/playlist
else
    for i in "$@"; do
        echo "$i" >> ~/.mpv/playlist
    done
fi
